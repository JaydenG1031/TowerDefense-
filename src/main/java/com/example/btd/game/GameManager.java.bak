package com.example.btd.game;

import javafx.animation.AnimationTimer;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Dialog;
import javafx.scene.control.Label;
import javafx.scene.layout.VBox;
import javafx.geometry.Insets;
import java.util.ArrayList;
import java.util.List;

public class GameManager {
    private GraphicsContext gc;
    private List<Tower> towers;
    private List<Enemy> enemies;
    private GameMap gameMap;
    private int playerHealth;
    private int money;
    private int score;
    private boolean gameOver;
    private LeaderboardManager leaderboard;
    private double gameSpeed = 1.0;  // Default game speed
    private String playerName = null;

    public LeaderboardManager getLeaderboardManager() {
        return leaderboard;
    }
    
    public void setPlayerName(String name) {
        this.playerName = name;
    }
    
    public String getPlayerName() {
        return playerName;
    }

    public GameManager(GraphicsContext gc, double gameAreaWidth, double gameAreaHeight) {
        this.gc = gc;
        this.towers = new ArrayList<>();
        this.enemies = new ArrayList<>();
        this.gameMap = new GameMap(gameAreaWidth, gameAreaHeight);
        this.playerHealth = 100;
        this.money = 1000;
        this.score = 0;
        this.gameOver = false;
        this.leaderboard = new LeaderboardManager();
        
        // Show name input dialog before starting
        requestPlayerName();
    }
    
    private void requestPlayerName() {
        javafx.scene.control.TextInputDialog dialog = new javafx.scene.control.TextInputDialog("");
        dialog.setTitle("Welcome to Balloon Tower Defense");
        dialog.setHeaderText("Enter your name to begin");
        dialog.setContentText("Name:");
        
        // Center the dialog
        dialog.initOwner(gc.getCanvas().getScene().getWindow());
        
        // Make sure we get a name
        while (playerName == null || playerName.trim().isEmpty()) {
            dialog.showAndWait().ifPresentOrElse(
                name -> {
                    if (!name.trim().isEmpty()) {
                        playerName = name.trim();
                    }
                },
                () -> playerName = "Unknown Player"
            );
        }
    }

    public void startGame() {
        new AnimationTimer() {
            private long lastUpdate = 0;

            @Override
            public void handle(long now) {
                if (lastUpdate == 0) {
                    lastUpdate = now;
                    return;
                }

                if (gameOver) {
                    this.stop();
                    handleGameOver();
                    return;
                }

                double elapsedSeconds = (now - lastUpdate) / 1_000_000_000.0;
                update(elapsedSeconds * gameSpeed);  // Apply game speed to elapsed time
                render();
                lastUpdate = now;
            }
        }.start();
    }

    private void update(double deltaTime) {
        // Update game state
        updateEnemies(deltaTime);
        updateTowers(deltaTime);
        checkCollisions();
        spawnEnemies();
    }

    private void render() {
        // Clear canvas
        gc.clearRect(0, 0, 800, 600);
        
        // Render game elements
        gameMap.render(gc);
        renderEnemies();
        renderTowers();
        renderUI();
    }

    private void updateEnemies(double deltaTime) {
        enemies.forEach(enemy -> enemy.update(deltaTime));
        // Check for dead enemies and collect rewards
        enemies.removeIf(enemy -> {
            if (enemy.isDead()) {
                money += enemy.getReward(); // Add reward money when enemy dies
                score += enemy.getReward(); // Also add to score
                return true;
            }
            return false;
        });
    }

    private void updateTowers(double deltaTime) {
        towers.forEach(tower -> tower.update(deltaTime, enemies));
    }

    private void checkCollisions() {
        // Check for collisions between projectiles and enemies
        towers.forEach(tower -> tower.checkCollisions(enemies));
    }

    private double spawnTimer = 0;
    private int waveNumber = 0;
    private boolean waveInProgress = false;
    private int enemiesLeftInWave = 0;
    private double waveBreakTimer = 5.0; // Time between waves in seconds
    private boolean isWaveBreak = true;

    // Wave system parameters
    private static final double BASE_ENEMY_HEALTH = 50.0;
    private static final double BASE_ENEMY_SPEED = 2.0;
    private static final int BASE_ENEMY_REWARD = 10;
    private static final int BASE_WAVE_SIZE = 5;
    private static final double HEALTH_SCALING = 1.2; // Health increases by 20% each wave
    private static final double SPEED_SCALING = 1.1; // Speed increases by 10% each wave
    private static final double SPAWN_RATE_SCALING = 0.9; // Spawn delay decreases by 10% each wave
    private static final int BOSS_WAVE_INTERVAL = 5; // Boss every 5 waves

    public int getWaveNumber() {
        return waveNumber;
    }

    private void spawnEnemies() {
        if (isWaveBreak) {
            waveBreakTimer -= 0.016;
            if (waveBreakTimer <= 0 && enemies.isEmpty()) {
                startNextWave();
            }
            return;
        }

        if (waveInProgress) {
            spawnTimer += 0.016;
            double spawnDelay = Math.max(0.3, 1.0 * Math.pow(SPAWN_RATE_SCALING, waveNumber)); // Minimum 0.3s spawn delay
            
            if (spawnTimer >= spawnDelay && enemiesLeftInWave > 0) {
                boolean isBossWave = (waveNumber % BOSS_WAVE_INTERVAL == 0);
                
                double health = BASE_ENEMY_HEALTH * Math.pow(HEALTH_SCALING, waveNumber);
                double speed = BASE_ENEMY_SPEED * Math.pow(SPEED_SCALING, waveNumber);
                int reward = BASE_ENEMY_REWARD + waveNumber * 2;
                
                if (isBossWave) {
                    health *= 3.0; // Boss has 3x health
                    speed *= 0.7; // Boss is slower
                    reward *= 2; // Boss gives double reward
                }
                
                Enemy enemy = new Enemy(
                    gameMap.getPath(),
                    health,
                    speed,
                    reward,
                    gameMap.getWidth(),
                    gameMap.getHeight()
                );
                enemies.add(enemy);
                enemiesLeftInWave--;
                spawnTimer = 0;
            }

            if (enemiesLeftInWave <= 0) {
                waveInProgress = false;
                if (enemies.isEmpty()) {
                    startWaveBreak();
                }
            }
        }
    }

    private void startNextWave() {
        waveNumber++;
        waveInProgress = true;
        isWaveBreak = false;
        enemiesLeftInWave = BASE_WAVE_SIZE + waveNumber * 2;
        spawnTimer = 0;
        money += 100 + waveNumber * 25; // Bonus money scales with wave number
    }

    private void startWaveBreak() {
        isWaveBreak = true;
        waveBreakTimer = 5.0;
        money += 50 + waveNumber * 25; // Additional completion bonus
    }

    private void renderEnemies() {
        enemies.forEach(enemy -> enemy.render(gc));
    }

    private void renderTowers() {
        towers.forEach(tower -> tower.render(gc));
    }

    private void renderUI() {
        // Render health, money, score
    }

    private void showLeaderboard() {
        // Create a dialog to show the leaderboard
        javafx.scene.control.Dialog<Void> dialog = new javafx.scene.control.Dialog<>();
        dialog.setTitle("Leaderboard");
        dialog.setHeaderText("Top Scores");
        
        // Create a VBox to hold the scores
        javafx.scene.layout.VBox content = new javafx.scene.layout.VBox(10);
        content.setPadding(new javafx.geometry.Insets(10));
        
        // Get top 10 scores
        List<LeaderboardEntry> topScores = leaderboard.getTopScores(10);
        
        // Add each score to the dialog
        for (int i = 0; i < topScores.size(); i++) {
            LeaderboardEntry entry = topScores.get(i);
            javafx.scene.control.Label scoreLabel = new javafx.scene.control.Label(
                String.format("%d. %s - %d", i + 1, entry.getPlayerName(), entry.getScore())
            );
            content.getChildren().add(scoreLabel);
        }
        
        // Add the content to the dialog
        dialog.getDialogPane().setContent(content);
        
        // Add OK button
        dialog.getDialogPane().getButtonTypes().add(javafx.scene.control.ButtonType.OK);
        
        // Center the dialog
        dialog.initOwner(gc.getCanvas().getScene().getWindow());
        
        // Show the dialog
        dialog.showAndWait();
    }
    
    private void handleGameOver() {
        // Only save score if the player lost (health reached 0)
        if (playerHealth <= 0) {
            // Show game over message
            javafx.scene.control.Alert alert = new javafx.scene.control.Alert(
                javafx.scene.control.Alert.AlertType.INFORMATION
            );
            alert.setTitle("Game Over");
            alert.setHeaderText("Game Over, " + playerName + "!");
            alert.setContentText("Your final score: " + score);
            
            // Center the dialog
            alert.initOwner(gc.getCanvas().getScene().getWindow());
            alert.showAndWait();
            
            // Save the score
            leaderboard.addScore(playerName, score);
            
            // Show the leaderboard
            showLeaderboard();
        }
    }
            showLeaderboard();
        }
    }
    
    private void showLeaderboard() {
        // Create a dialog to show the leaderboard
        javafx.scene.control.Dialog<Void> dialog = new javafx.scene.control.Dialog<>();
        dialog.setTitle("Leaderboard");
        dialog.setHeaderText("Top Scores");
        
        // Create a VBox to hold the scores
        javafx.scene.layout.VBox content = new javafx.scene.layout.VBox(10);
        content.setPadding(new javafx.geometry.Insets(10));
        
        // Get top 10 scores
        List<LeaderboardEntry> topScores = leaderboard.getTopScores(10);
        
        // Add each score to the dialog
        for (int i = 0; i < topScores.size(); i++) {
            LeaderboardEntry entry = topScores.get(i);
            javafx.scene.control.Label scoreLabel = new javafx.scene.control.Label(
                String.format("%d. %s - %d", i + 1, entry.getPlayerName(), entry.getScore())
            );
            content.getChildren().add(scoreLabel);
        }
        
        // Add the content to the dialog
        dialog.getDialogPane().setContent(content);
        
        // Add OK button
        dialog.getDialogPane().getButtonTypes().add(javafx.scene.control.ButtonType.OK);
        
        // Center the dialog
        dialog.initOwner(gc.getCanvas().getScene().getWindow());
        
        // Show the dialog
        dialog.showAndWait();
    }

    // Getters and setters
    public int getScore() { return score; }
    public int getMoney() { return money; }
    public int getPlayerHealth() { return playerHealth; }
    public boolean isGameOver() { return gameOver; }

    // Game actions
    public boolean placeTower(Tower tower, double x, double y) {
        if (money >= tower.getCost() && gameMap.canPlaceTower(x, y)) {
            towers.add(tower);
            money -= tower.getCost();
            return true;
        }
        return false;
    }

    public void addMoney(int amount) {
        money += amount;
    }

    public void takeDamage(int damage) {
        playerHealth -= damage;
        if (playerHealth <= 0) {
            playerHealth = 0; // Ensure health doesn't go negative
            gameOver = true;
        }
    }

    public void addScore(int points) {
        score += points;
    }

    public void setGameSpeed(double speed) {
        this.gameSpeed = Math.max(0.5, Math.min(10.0, speed));  // Limit speed between 0.5x and 10.0x
    }

    public double getGameSpeed() {
        return gameSpeed;
    }
    
    public void showCurrentLeaderboard() {
        showLeaderboard();
    }
}